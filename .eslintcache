[{"/Users/owner/Code/northone/src/index.js":"1","/Users/owner/Code/northone/src/App.js":"2","/Users/owner/Code/northone/src/redux/store/index.js":"3","/Users/owner/Code/northone/src/components/add-todo.component.js":"4","/Users/owner/Code/northone/src/components/todos-list.component.js":"5","/Users/owner/Code/northone/src/components/todo.component.js":"6","/Users/owner/Code/northone/src/redux/saga/api-sagas.js":"7","/Users/owner/Code/northone/src/redux/actions/index.js":"8","/Users/owner/Code/northone/src/redux/services/todo.service.js":"9","/Users/owner/Code/northone/src/redux/constants/action.types.js":"10","/Users/owner/Code/northone/src/redux/reducers/index.js":"11","/Users/owner/Code/northone/src/redux/selectors/index.js":"12","/Users/owner/Code/northone/src/redux/utils/index.js":"13","/Users/owner/Code/northone/src/http-common.js":"14"},{"size":385,"mtime":1612802080959,"results":"15","hashOfConfig":"16"},{"size":1681,"mtime":1612802080958,"results":"17","hashOfConfig":"16"},{"size":707,"mtime":1612802080961,"results":"18","hashOfConfig":"16"},{"size":3945,"mtime":1614203434280,"results":"19","hashOfConfig":"16"},{"size":5895,"mtime":1712010614993,"results":"20","hashOfConfig":"16"},{"size":4162,"mtime":1612802080958,"results":"21","hashOfConfig":"16"},{"size":5771,"mtime":1614871418817,"results":"22","hashOfConfig":"16"},{"size":3261,"mtime":1614787865674,"results":"23","hashOfConfig":"16"},{"size":569,"mtime":1612738052747,"results":"24","hashOfConfig":"16"},{"size":1649,"mtime":1614789535364,"results":"25","hashOfConfig":"16"},{"size":3336,"mtime":1614789808784,"results":"26","hashOfConfig":"16"},{"size":872,"mtime":1614731926795,"results":"27","hashOfConfig":"16"},{"size":795,"mtime":1612802080961,"results":"28","hashOfConfig":"16"},{"size":173,"mtime":1615083667823,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"svefmk",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/owner/Code/northone/src/index.js",[],["62","63"],"/Users/owner/Code/northone/src/App.js",[],"/Users/owner/Code/northone/src/redux/store/index.js",[],"/Users/owner/Code/northone/src/components/add-todo.component.js",["64"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport DatePicker from \"react-date-picker\";\n\nimport { addTodo, setTodoToAdd, setSubmitted } from \"../redux/actions\";\nimport { selectTodoToAdd, selectSubmitted } from \"../redux/selectors\";\nimport { formatDate } from \"../redux/utils\";\n\n\nconst AddTodo = () => {\n  const dispatch = useDispatch();\n  let TodoToAdd = useSelector(selectTodoToAdd);\n  const submitted = useSelector(selectSubmitted);\n  const [dateValue, onChange] = useState(new Date());\n\n\n  \n  // useEffect(() => {\n  //   const storedTodoToAdd = JSON.parse(localStorage.getItem(\"todoToAdd\"));\n  //   if (storedTodoToAdd) {\n  //     dispatch(setTodoToAdd(storedTodoToAdd));\n  //   }\n  // }, []);\n\n  // useEffect(() => {\n  //   if (!TodoToAdd) {\n  //     let todoToAdd = {\n  //       id: null,\n  //       title: \"\",\n  //       description: \"\",\n  //       status: false,\n  //       dueDate: formatDate(new Date()),\n  //     };\n  //     localStorage.setItem(\"todoToAdd\", JSON.stringify(todoToAdd));\n  //     TodoToAdd = todoToAdd;\n  //   } else {\n  //     localStorage.setItem(\"todoToAdd\", JSON.stringify(TodoToAdd));\n  //   }\n  // }, [TodoToAdd]);\n\n\n\n  if (!TodoToAdd) {\n    let todoToAdd = JSON.parse(localStorage.getItem(\"todoToAdd\"));\n    if (!todoToAdd) {\n      todoToAdd = {\n        id: null,\n        title: \"\",\n        description: \"\",\n        status: false,\n        dueDate: formatDate(new Date()),\n      };\n      localStorage.setItem(\"todoToAdd\", JSON.stringify(todoToAdd));\n    }\n    dispatch(setTodoToAdd(todoToAdd));\n    TodoToAdd = todoToAdd;\n  }\n\n\n  let initialTodoState = {\n    id: null,\n    title: \"\",\n    description: \"\",\n    status: false,\n    dueDate: formatDate(new Date()),\n  };\n\n  const handleInputChange = (event) => {\n    event.preventDefault(); // prevent a browser reload/refresh\n    const { name, value } = event.target;\n    dispatch(setTodoToAdd({ ...TodoToAdd, [name]: value }));\n  };\n\n  const saveTodo = () => {\n    if (!dateValue) return;\n    var data = {\n      title: TodoToAdd.title,\n      description: TodoToAdd.description,\n      status: false,\n      dueDate: dateValue,\n    };\n    dispatch(addTodo(data));\n    localStorage.removeItem(\"todoToAdd\");\n  };\n\n  const newTodo = () => {\n    dispatch(setTodoToAdd(initialTodoState));\n    dispatch(setSubmitted(false));\n  };\n\n  return (\n    <div className=\"submit-form\">\n      {submitted && TodoToAdd ? (\n        <div>\n          <h4>The new \"To Do\" item was created successfully!</h4>\n          <button className=\"btn btn-success\" onClick={() => newTodo()}>\n            Add\n          </button>\n        </div>\n      ) : (\n        <div>\n          <div className=\"form-group\">\n            <label htmlFor=\"title\">Title</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"title\"\n              required\n              value={TodoToAdd && TodoToAdd.title ? TodoToAdd.title : ''}\n              onChange={(event) => handleInputChange(event)}\n              name=\"title\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">Description</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"description\"\n              required\n              value={TodoToAdd && TodoToAdd.description ? TodoToAdd.description : ''}\n              onChange={(event) => handleInputChange(event)}\n              name=\"description\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"dueDate\">Due Date</label>{\" \"}\n            <DatePicker onChange={onChange} value={dateValue} />\n          </div>\n\n          <button\n            onClick={() => saveTodo(TodoToAdd)}\n            className=\"btn btn-success\"\n          >\n            Submit\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddTodo;","/Users/owner/Code/northone/src/components/todos-list.component.js",["65"],"/Users/owner/Code/northone/src/components/todo.component.js",["66"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport DatePicker from \"react-date-picker\";\n\nimport {\n  setCurrentTodo,\n  setMessage,\n  updateTodo,\n  deleteTodo,\n} from \"../redux/actions\";\nimport { selectCurrentTodo, selectMessage } from \"../redux/selectors\";\n\n\nconst Todo = (props) => {\n  const dispatch = useDispatch();\n  const currentTodo = useSelector(selectCurrentTodo);\n  const message = useSelector(selectMessage);\n  const [dateValue, onChange] = useState(\n    new Date(\n      currentTodo && currentTodo.dueDate ? currentTodo.dueDate : new Date()\n    )\n  );\n\n  useEffect(() => {\n    clearMessage();\n    checkLocalStorage();\n  }, []);\n\n  const clearMessage = () => dispatch(setMessage(\"\"));\n\n  const checkLocalStorage = () => {\n    if (!currentTodo) {\n      let todo = localStorage.getItem(\"currentTodo\");\n      dispatch(setCurrentTodo(JSON.parse(todo)));\n    }\n  };\n\n  const handleInputChange = (event) => {\n    event.preventDefault(); // prevent a browser reload/refresh\n    const { name, value } = event.target;\n    dispatch(setCurrentTodo({ ...currentTodo, [name]: value }));\n  };\n\n  const updateTodoUnderEdit = (status = null) => {\n    currentTodo.dueDate = dateValue;\n    if (status !== null) {\n      currentTodo.status = status;\n    }\n    dispatch(updateTodo({ id: currentTodo._id, todo: currentTodo }));\n  };\n\n  const deleteTodoUnderEdit = () => {\n    dispatch(deleteTodo({ id: currentTodo._id }));\n    props.history.push(\"/todos\");\n  };\n\n  return (\n    <div>\n      {currentTodo ? (\n        <div className=\"edit-form\">\n          <h4>To Do</h4>\n          <form>\n            <div className=\"form-group\">\n              <label htmlFor=\"title\">\n                <strong>Title:</strong>\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"title\"\n                name=\"title\"\n                value={currentTodo.title}\n                onChange={(currentTodo) => handleInputChange(currentTodo)}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"description\">\n                <strong>Description:</strong>\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"description\"\n                name=\"description\"\n                value={currentTodo.description}\n                onChange={(currentTodo) => handleInputChange(currentTodo)}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>\n                <strong>Status:</strong>{\" \"}\n              </label>\n              {currentTodo.status ? \"Done\" : \"Pending\"}\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"dueDate\">\n                <strong>Due Date:</strong>\n              </label>{\" \"}\n              <DatePicker onChange={onChange} value={dateValue} />\n            </div>\n          </form>\n\n          {currentTodo.status ? (\n            <button\n              className=\"btn btn-primary mr-2\"\n              onClick={() => updateTodoUnderEdit(false)}\n            >\n              Mark Pending\n            </button>\n          ) : (\n            <button\n              className=\"btn btn-primary mr-2\"\n              onClick={() => updateTodoUnderEdit(true)}\n            >\n              Mark Done\n            </button>\n          )}\n\n          <button\n            className=\"btn btn-danger mr-2\"\n            onClick={() => deleteTodoUnderEdit()}\n          >\n            Delete{' '}<FontAwesomeIcon icon={faTrash} />\n          </button>\n\n          <button\n            type=\"submit\"\n            className=\"btn btn-success mr-2\"\n            onClick={() => updateTodoUnderEdit()}\n          >\n            Update\n          </button>\n          <p>{message}</p>\n        </div>\n      ) : (\n        <div>\n          <br />\n          <p>Please click on a \"To Do\"...</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Todo;","/Users/owner/Code/northone/src/redux/saga/api-sagas.js",[],"/Users/owner/Code/northone/src/redux/actions/index.js",[],"/Users/owner/Code/northone/src/redux/services/todo.service.js",["67"],"import http from \"../../http-common\";\n\nclass TodoDataService {\n  getTodos() {\n    return http.get(`/api/todos`);\n  }\n\n  getTodo(id) {\n    return http.get(`/api/todos/${id}`);\n  }\n\n  addTodo(data) {\n    return http.post(`/api/todos`, data);\n  }\n\n  updateTodo(id, data) {\n    return http.put(`/api/todos/${id}`, data);\n  }\n\n  deleteTodo(id) {\n    return http.delete(`/api/todos/${id}`);\n  }\n\n  deleteTodos() {\n    return http.delete(`/api/todos`);\n  }\n\n  findByTitle(title) {\n    return http.get(`/api/todos?title=${title}`);\n  }\n}\n\nexport default new TodoDataService();\n","/Users/owner/Code/northone/src/redux/constants/action.types.js",[],"/Users/owner/Code/northone/src/redux/reducers/index.js",[],"/Users/owner/Code/northone/src/redux/selectors/index.js",[],"/Users/owner/Code/northone/src/redux/utils/index.js",[],"/Users/owner/Code/northone/src/http-common.js",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":1,"column":27,"nodeType":"74","messageId":"75","endLine":1,"endColumn":36},{"ruleId":"76","severity":1,"message":"77","line":38,"column":6,"nodeType":"78","endLine":38,"endColumn":8,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"80","line":29,"column":6,"nodeType":"78","endLine":29,"endColumn":8,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":33,"column":1,"nodeType":"84","endLine":33,"endColumn":38},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkCurrentIndex' and 'retrieveTodos'. Either include them or remove the dependency array.","ArrayExpression",["87"],"React Hook useEffect has missing dependencies: 'checkLocalStorage' and 'clearMessage'. Either include them or remove the dependency array.",["88"],"import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},"Update the dependencies array to be: [checkCurrentIndex, retrieveTodos]",{"range":"93","text":"94"},"Update the dependencies array to be: [checkLocalStorage, clearMessage]",{"range":"95","text":"96"},[1109,1111],"[checkCurrentIndex, retrieveTodos]",[823,825],"[checkLocalStorage, clearMessage]"]