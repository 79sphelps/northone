[{"/Users/owner/Code/PROJECTS/northone/src/index.js":"1","/Users/owner/Code/PROJECTS/northone/src/App.js":"2","/Users/owner/Code/PROJECTS/northone/src/redux/store/index.js":"3","/Users/owner/Code/PROJECTS/northone/src/components/calendar-event.component.js":"4","/Users/owner/Code/PROJECTS/northone/src/components/calendar-events.component.js":"5","/Users/owner/Code/PROJECTS/northone/src/components/add-calendar-event.component.js":"6","/Users/owner/Code/PROJECTS/northone/src/redux/saga/api-sagas.js":"7","/Users/owner/Code/PROJECTS/northone/src/redux/actions/index.js":"8","/Users/owner/Code/PROJECTS/northone/src/redux/services/todo.service.js":"9","/Users/owner/Code/PROJECTS/northone/src/redux/constants/action.types.js":"10","/Users/owner/Code/PROJECTS/northone/src/redux/reducers/index.js":"11","/Users/owner/Code/PROJECTS/northone/src/redux/utils/index.js":"12","/Users/owner/Code/PROJECTS/northone/src/redux/selectors/index.js":"13","/Users/owner/Code/PROJECTS/northone/src/http-common.js":"14"},{"size":392,"mtime":1730071043962,"results":"15","hashOfConfig":"16"},{"size":2212,"mtime":1730068401008,"results":"17","hashOfConfig":"16"},{"size":707,"mtime":1612802080961,"results":"18","hashOfConfig":"16"},{"size":5411,"mtime":1729787405454,"results":"19","hashOfConfig":"16"},{"size":12569,"mtime":1729787603826,"results":"20","hashOfConfig":"16"},{"size":4511,"mtime":1720718058434,"results":"21","hashOfConfig":"16"},{"size":5771,"mtime":1725638766038,"results":"22","hashOfConfig":"16"},{"size":3261,"mtime":1725638755064,"results":"23","hashOfConfig":"16"},{"size":569,"mtime":1725638771004,"results":"24","hashOfConfig":"16"},{"size":1649,"mtime":1614789535364,"results":"25","hashOfConfig":"16"},{"size":3336,"mtime":1614789808784,"results":"26","hashOfConfig":"16"},{"size":795,"mtime":1612802080961,"results":"27","hashOfConfig":"16"},{"size":872,"mtime":1614731926795,"results":"28","hashOfConfig":"16"},{"size":739,"mtime":1725638828348,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1hlmiik",{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/owner/Code/PROJECTS/northone/src/index.js",["62"],"/Users/owner/Code/PROJECTS/northone/src/App.js",[],"/Users/owner/Code/PROJECTS/northone/src/redux/store/index.js",[],["63","64"],"/Users/owner/Code/PROJECTS/northone/src/components/calendar-event.component.js",["65"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { \n  // Link , \n  useNavigate\n} from \"react-router-dom\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport DatePicker from \"react-date-picker\";\nimport {\n  setCurrentTodo,\n  setMessage,\n  updateTodo,\n  deleteTodo,\n} from \"../redux/actions\";\nimport { selectCurrentTodo, selectMessage } from \"../redux/selectors\";\nimport TimePicker from \"react-time-picker\";\nimport \"react-time-picker/dist/TimePicker.css\";\nimport \"react-clock/dist/Clock.css\";\n\nconst CalendarEvent = (props) => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const currentTodo = useSelector(selectCurrentTodo);\n  const message = useSelector(selectMessage);\n  const [dateValue, onChange] = useState(\n    new Date(\n      currentTodo && currentTodo.dueDate ? currentTodo.dueDate : new Date()\n    )\n  );\n\n  const [timeValue, onChangeTimeValue] = useState(\n    currentTodo && currentTodo.start\n      ? currentTodo.start\n      : new Date().toISOString().replace(/T.*$/, \"\") + \"T12:00:00\"\n  );\n  // currentTodo.dueDate + currentTodo.start :\n  // new Date().toISOString().replace(/T.*$/, '')  + 'T12:00:00');\n\n  useEffect(() => {\n    clearMessage();\n    checkLocalStorage();\n  }, []);\n\n  const clearMessage = () => dispatch(setMessage(\"\"));\n\n  const checkLocalStorage = () => {\n    if (!currentTodo) {\n      let todo = localStorage.getItem(\"currentTodo\");\n      dispatch(setCurrentTodo(JSON.parse(todo)));\n    }\n  };\n\n  const handleInputChange = (event) => {\n    event.preventDefault(); // prevent a browser reload/refresh\n    const { name, value } = event.target;\n    dispatch(setCurrentTodo({ ...currentTodo, [name]: value }));\n  };\n\n  const updateTodoUnderEdit = (status = null) => {\n    currentTodo.dueDate = dateValue;\n    currentTodo.start = timeValue;\n    if (status !== null) {\n      currentTodo.status = status;\n    }\n    // dispatch(updateTodo({ id: currentTodo._id, todo: currentTodo }));\n    dispatch(updateTodo({ id: currentTodo.id, todo: currentTodo }));\n  };\n\n  const deleteTodoUnderEdit = () => {\n    // dispatch(deleteTodo({ id: currentTodo._id }));\n    dispatch(deleteTodo({ id: currentTodo.id }));\n    // props.history.push(\"/calendar-events\");\n    navigate(\"/calendar-events\");\n  };\n\n  return (\n    <div>\n      {currentTodo ? (\n        <div className=\"edit-form\">\n          <h4>Calendar Event</h4>\n          <form>\n            <div className=\"form-group\">\n              <label htmlFor=\"title\">\n                <strong>Title: </strong>\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"title\"\n                name=\"title\"\n                value={currentTodo.title}\n                onChange={(currentTodo) => handleInputChange(currentTodo)}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"description\">\n                <strong>Description: </strong>\n              </label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"description\"\n                name=\"description\"\n                value={currentTodo.description}\n                onChange={(currentTodo) => handleInputChange(currentTodo)}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>\n                <strong>Status: </strong>{\" \"}\n              </label>\n              {currentTodo.status ? \"Done\" : \"Pending\"}\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"dueDate\">\n                <strong>Due Date: </strong>\n              </label>{\" \"}\n              <DatePicker onChange={onChange} value={dateValue} />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"startTime\">\n                <strong>Start: </strong>\n              </label>\n              <TimePicker onChange={onChangeTimeValue} value={timeValue} />\n            </div>\n          </form>\n\n          {currentTodo.status ? (\n            <button\n              className=\"btn btn-primary mr-2\"\n              onClick={() => updateTodoUnderEdit(false)}\n            >\n              Mark Pending\n            </button>\n          ) : (\n            <button\n              className=\"btn btn-primary mr-2\"\n              onClick={() => updateTodoUnderEdit(true)}\n            >\n              Mark Done\n            </button>\n          )}\n\n          <button\n            className=\"btn btn-danger mr-2\"\n            onClick={() => deleteTodoUnderEdit()}\n          >\n            Delete <FontAwesomeIcon icon={faTrash} />\n          </button>\n\n          <button\n            type=\"submit\"\n            className=\"btn btn-success mr-2\"\n            onClick={() => updateTodoUnderEdit()}\n          >\n            Update\n          </button>\n          <button\n            className=\"btn btn-danger mr-2\"\n            // onClick={() => props.history.push(\"/calendar-events\")}\n            onClick={() => navigate(\"/calendar-events\")}\n          >\n            Cancel\n          </button>\n          <p>{message}</p>\n        </div>\n      ) : (\n        <div>\n          <br />\n          <p>Please click on a calendar event.</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CalendarEvent;\n","/Users/owner/Code/PROJECTS/northone/src/components/calendar-events.component.js",["66"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Link , useNavigate} from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { faEdit, faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport DatePicker from \"react-date-picker\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport {\n  getTodos,\n  deleteTodos,\n  findByTitle,\n  setSearchTitle,\n  setCurrentIndex,\n  setCurrentTodo,\n} from \"../redux/actions\";\nimport {\n  selectTodos,\n  selectCurrentTodo,\n  selectCurrentIndex,\n  selectSearchTitle,\n} from \"../redux/selectors\";\nimport { formatDate } from \"../redux/utils\";\n\nimport Button from \"react-bootstrap/Button\";\nimport { addTodo } from \"../redux/actions\";\nimport Modal from \"react-bootstrap/Modal\";\nimport TimePicker from \"react-time-picker\";\nimport \"react-time-picker/dist/TimePicker.css\";\nimport \"react-clock/dist/Clock.css\";\n\n\nconst CalendarEvents = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const datePicker = useRef({ isOpen: false });\n  const todos = useSelector(selectTodos);\n  const currentTodo = useSelector(selectCurrentTodo);\n  const currentIndex = useSelector(selectCurrentIndex);\n  const searchTitle = useSelector(selectSearchTitle);\n\n  let initialEvent = {\n    id: null,\n    title: \"\",\n    description: \"\",\n    status: false,\n    dueDate: formatDate(new Date()),\n    start: \"\",\n  };\n\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  // const handleShow = () => setShow(true);\n  const [dateValue, onChange] = useState(new Date());\n  const [timeValue, onChangeTimeValue] = useState(\"\"); // useState('10:00');\n  const [newEvent, setNewEvent] = useState(initialEvent);\n\n  useEffect(() => {\n    retrieveTodos();\n    // checkCurrentIndex();\n  }, []);\n\n  const mapTodoEventsToCalendar = (arr = []) => {\n    const result = arr.map((obj) => {\n      const res = {};\n      res[\"title\"] = obj[\"title\"];\n      res[\"date\"] = formatDate(obj[\"dueDate\"]);\n      // res[\"start\"] = obj[\"start\"] ? obj['start'] : '';\n      res[\"start\"] = obj[\"start\"]\n        ? res[\"date\"] + \"T\" + obj[\"start\"] + \":00\"\n        : res[\"date\"] + \"T12:00:00\";\n      res[\"id\"] = obj[\"_id\"];\n\n      res[\"createdAt\"] = obj[\"createdAt\"];\n      res[\"description\"] = obj[\"description\"];\n      res[\"dueDate\"] = obj[\"dueDate\"];\n      res[\"status\"] = obj[\"status\"];\n      res[\"updatedAt\"] = obj[\"updatedAt\"];\n      res[\"start2\"] = obj[\"start\"];\n\n      return res;\n    });\n    return result;\n  };\n\n  const retrieveTodos = () => {\n    dispatch(getTodos());\n  };\n\n  // const checkCurrentIndex = () => {\n  //   if (!currentIndex) {\n  //     dispatch(setCurrentTodo(JSON.parse(localStorage.getItem('currentTodo'))));\n  //     dispatch(setCurrentIndex(JSON.parse(localStorage.getItem('currentIndex'))));\n  //   }\n  // };\n\n  const onChangeSearchTitle = (event) => {\n    event.preventDefault(); // prevent a browser reload/refresh\n    dispatch(setSearchTitle(event.target.value));\n  };\n\n  const refreshList = () => {\n    retrieveTodos();\n    dispatch(setCurrentTodo(null));\n    dispatch(setCurrentIndex(-1));\n  };\n\n  const setActiveTodo = (todo, index) => {\n    dispatch(setCurrentTodo(todo));\n    dispatch(setCurrentIndex(index));\n    if (datePicker && datePicker.current && datePicker.current.openCalendar) {\n      datePicker.current.openCalendar();\n    }\n    localStorage.setItem(\"currentTodo\", JSON.stringify(todo));\n    localStorage.setItem(\"currentIndex\", JSON.stringify(currentIndex));\n  };\n\n  const removeAllTodos = () => {\n    dispatch(deleteTodos());\n    refreshList();\n  };\n\n  const findItemByTitle = () => {\n    dispatch(findByTitle(searchTitle));\n    // dispatch(setCurrentTodo(null));\n  };\n\n  // let eventGuid = 0;\n  // let todayStr = new Date().toISOString().replace(/T.*$/, '') // YYYY-MM-DD of today\n\n  //  const INITIAL_EVENTS = [\n  //   {\n  //     id: createEventId(),\n  //     title: 'All-day event',\n  //     start: todayStr\n  //   },\n  //   {\n  //     id: createEventId(),\n  //     title: 'Timed event',\n  //     start: todayStr + 'T12:00:00'\n  //   }\n  // ]\n\n  // function createEventId() {\n  //   return String(eventGuid++);\n  // }\n\n  function handleDateSelect(selectInfo) {\n    // let title = prompt(\"Please enter a new title for your event\");\n    // let calendarApi = selectInfo.view.calendar;\n    // calendarApi.unselect(); // clear date selection\n    // if (title) {\n    //   calendarApi.addEvent({\n    //     id: createEventId(),\n    //     title,\n    //     start: selectInfo.startStr,\n    //     end: selectInfo.endStr,\n    //     allDay: selectInfo.allDay,\n    //   });\n    // }\n\n    setShow(true);\n  }\n\n  const saveNewEvent = () => {\n    var data = {\n      title: newEvent.title,\n      description: newEvent.description,\n      status: false,\n      dueDate: dateValue,\n      start: timeValue,\n    };\n    dispatch(addTodo(data));\n    setShow(false);\n    setNewEvent(initialEvent);\n  };\n\n  const handleEventChange = (v) => {\n    v.preventDefault(); // prevent a browser reload/refresh\n    const { name, value } = v.target;\n    setNewEvent({ ...newEvent, [name]: value });\n  };\n\n  function handleEventClick(clickInfo) {\n    // if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n    //   clickInfo.event.remove()\n    // }\n    let todo = {\n      id: clickInfo.event.id,\n      title: clickInfo.event.title,\n      description: clickInfo.event.extendedProps.description,\n      status: clickInfo.event.status,\n      // dueDate: formatDate(new Date()),\n      dueDate: clickInfo.event.extendedProps.dueDate,\n      start: clickInfo.event.extendedProps.start2,\n    };\n\n    setActiveTodo(todo, 0);\n    navigate(\"/calendar-events/\" + clickInfo.event.id);\n  }\n\n  // function handleEvents(events) {\n  //   setCurrentEvents(events)\n  // }\n\n  function renderEventContent(eventInfo) {\n    return (\n      <>\n        <b>{eventInfo.timeText}</b>\n        <i>{eventInfo.event.title}</i>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"list row\">\n      <div className=\"col-md-8\" style={{ margin: \"0 auto\" }}>\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Search by title\"\n            value={searchTitle}\n            onChange={(searchTitle) => onChangeSearchTitle(searchTitle)}\n          />\n          <div className=\"input-group-append\">\n            <button\n              className=\"btn btn-outline-secondary\"\n              type=\"button\"\n              onClick={() => findItemByTitle()}\n            >\n              <FontAwesomeIcon icon={faSearch} />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className=\"col-md-6\">\n        <h4>Calendar Events</h4>\n        <ul className=\"list-group\">\n          {todos &&\n            todos.map((todo, index) => (\n              <li\n                className={\n                  \"list-group-item-action list-group-item \" +\n                  (index === currentIndex ? \"active\" : \"\")\n                }\n                onClick={() => setActiveTodo(todo, index)}\n                key={index}\n              >\n                {todo.title}\n              </li>\n            ))}\n        </ul>\n        <button\n          className=\"m-3 btn btn-sm btn-danger\"\n          onClick={() => removeAllTodos()}\n        >\n          Remove All\n        </button>\n      </div>\n      <div className=\"col-md-6\">\n        {currentTodo ? (\n          <div>\n            <h4>Calendar Item</h4>\n            <div>\n              <label>\n                <strong>Title:</strong>\n              </label>{\" \"}\n              {currentTodo.title}\n            </div>\n            <div>\n              <label>\n                <strong>Description:</strong>\n              </label>{\" \"}\n              {currentTodo.description}\n            </div>\n            <div>\n              <label>\n                <strong>Status:</strong>\n              </label>{\" \"}\n              {currentTodo.status ? \"Done\" : \"Pending\"}\n            </div>\n            {/* <div>\n              <label>\n                <strong>Due Date:</strong>\n              </label>{\" \"}\n              {currentTodo.dueDate}\n            </div> */}\n            <div className=\"form-group\">\n              <label htmlFor=\"dueDate\">\n                <strong>Due Date:</strong>\n              </label>{\" \"}\n              <DatePicker\n                isOpen={false}\n                ref={datePicker}\n                value={new Date(currentTodo.dueDate)}\n              />\n            </div>\n            <Link\n              to={\"/calendar-events/\" + currentTodo._id}\n              className=\"btn btn-sm btn-warning\"\n            >\n              Edit <FontAwesomeIcon icon={faEdit} />\n            </Link>\n          </div>\n        ) : (\n          <div>\n            <br />\n            <p>Click on a calendar item to show detailed info</p>\n          </div>\n        )}\n      </div>\n      <div className=\"col-md-12\" id=\"calendar\">\n        {todos ? (\n          <FullCalendar\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n            // plugins={[dayGridPlugin]}\n            initialView=\"dayGridMonth\"\n            weekends={true}\n            events={mapTodoEventsToCalendar(todos)}\n            // events={INITIAL_EVENTS}\n            headerToolbar={{\n              left: \"prev,next today\",\n              center: \"title\",\n              right: \"dayGridMonth,timeGridWeek,timeGridDay\",\n            }}\n            editable={true}\n            selectable={true}\n            selectMirror={true}\n            dayMaxEvents={true}\n            select={handleDateSelect}\n            eventContent={renderEventContent} // custom render function\n            eventClick={handleEventClick}\n            // eventsSet={handleEvents} // called after events are initialized/added/changed/removed\n          />\n        ) : (\n          <div>No Calendar Events to Show</div>\n        )}\n      </div>\n\n      <Modal\n        show={show}\n        onHide={handleClose}\n        centered=\"true\"\n        scrollable={true}\n        style={{\n          marginTop: \"100px\",\n          marginBottom: \"75px\",\n          height: \"90%\",\n          width: \"90%\",\n          marginLeft: \"5%\",\n        }}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title style={{ color: \"black\" }}>Create New Event</Modal.Title>\n        </Modal.Header>\n        <Modal.Body style={{ color: \"black\" }}>\n          <div className=\"submit-form\">\n            <div>\n              <div className=\"form-group\">\n                <label htmlFor=\"title\">Title: </label>{\" \"}\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"title\"\n                  required\n                  value={newEvent && newEvent.title ? newEvent.title : \"\"}\n                  onChange={(e) => handleEventChange(e)}\n                  name=\"title\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"description\">Description: </label>{\" \"}\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"description\"\n                  required\n                  value={newEvent.description ? newEvent.description : \"\"}\n                  onChange={(e) => handleEventChange(e)}\n                  name=\"description\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"dueDate\">Due Date:</label>{\" \"}\n                <DatePicker\n                  onChange={onChange}\n                  value={dateValue}\n                />\n              </div>\n              <div>\n                <label htmlFor=\"dueDate\">Time Start:</label>{\" \"}\n                <TimePicker onChange={onChangeTimeValue} value={timeValue} />\n              </div>\n              <div>\n                <button\n                  onClick={() => saveNewEvent()}\n                  className=\"btn btn-success\"\n                  style={{ marginTop: \"20px\" }}\n                >\n                  Submit\n                </button>\n              </div>\n            </div>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nexport default CalendarEvents;\n","/Users/owner/Code/PROJECTS/northone/src/components/add-calendar-event.component.js",[],"/Users/owner/Code/PROJECTS/northone/src/redux/saga/api-sagas.js",[],"/Users/owner/Code/PROJECTS/northone/src/redux/actions/index.js",[],"/Users/owner/Code/PROJECTS/northone/src/redux/services/todo.service.js",["67"],"import http from \"../../http-common\";\n\nclass TodoDataService {\n  getTodos() {\n    return http.get(`/api/todos`);\n  }\n\n  getTodo(id) {\n    return http.get(`/api/todos/${id}`);\n  }\n\n  addTodo(data) {\n    return http.post(`/api/todos`, data);\n  }\n\n  updateTodo(id, data) {\n    return http.put(`/api/todos/${id}`, data);\n  }\n\n  deleteTodo(id) {\n    return http.delete(`/api/todos/${id}`);\n  }\n\n  deleteTodos() {\n    return http.delete(`/api/todos`);\n  }\n\n  findByTitle(title) {\n    return http.get(`/api/todos?title=${title}`);\n  }\n}\n\nexport default new TodoDataService();\n","/Users/owner/Code/PROJECTS/northone/src/redux/constants/action.types.js",[],"/Users/owner/Code/PROJECTS/northone/src/redux/reducers/index.js",[],"/Users/owner/Code/PROJECTS/northone/src/redux/utils/index.js",[],"/Users/owner/Code/PROJECTS/northone/src/redux/selectors/index.js",[],"/Users/owner/Code/PROJECTS/northone/src/http-common.js",[],{"ruleId":"68","severity":1,"message":"69","line":3,"column":10,"nodeType":"70","messageId":"71","endLine":3,"endColumn":23},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":43,"column":6,"nodeType":"78","endLine":43,"endColumn":8,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"80","line":63,"column":6,"nodeType":"78","endLine":63,"endColumn":8,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":33,"column":1,"nodeType":"84","endLine":33,"endColumn":38},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","no-native-reassign",["85"],"no-negated-in-lhs",["86"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkLocalStorage' and 'clearMessage'. Either include them or remove the dependency array.","ArrayExpression",["87"],"React Hook useEffect has a missing dependency: 'retrieveTodos'. Either include it or remove the dependency array.",["88"],"import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},"Update the dependencies array to be: [checkLocalStorage, clearMessage]",{"range":"93","text":"94"},"Update the dependencies array to be: [retrieveTodos]",{"range":"95","text":"96"},[1358,1360],"[checkLocalStorage, clearMessage]",[2020,2022],"[retrieveTodos]"]